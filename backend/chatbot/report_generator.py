import os
from dotenv import load_dotenv
from google import genai
from chatbot.report_prompt import report_prompt

# Load environment variables from a .env file
load_dotenv()

class ReportGenerator:
    """
    A class that uses Google's Gemini API to generate structured CSV reports
    from user transaction data for downloading.
    """

    def __init__(self) -> None:
        """
        Initializes the report generator client using the Gemini API key stored in environment variables.
        """
        self.model = genai.Client(api_key=os.getenv("GEMINI_API"))

    def generate_report(self, transaction_type: str, months: int, transaction_data: str) -> str:
        """
        Generates a structured CSV report from the transaction data.

        Args:
            transaction_type (str): The type of transactions to include ("income", "expense", or "all").
            months (int): The number of months to include in the report.
            transaction_data (str): A string containing the user's financial transaction data.

        Returns:
            str: The generated CSV report content as a string.
        """
        # Format the prompt with transaction data and parameters
        prompt = report_prompt.format(
            transaction_type=transaction_type,
            months=months,
            transaction_data=transaction_data
        )

        # Send the prompt to the Gemini model and get the generated response
        response = self.model.models.generate_content(
            model="gemini-2.0-flash",
            contents=prompt,
        )

        # Return the response text generated by the model
        return response.text 