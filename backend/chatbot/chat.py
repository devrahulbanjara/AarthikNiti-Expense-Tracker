import os
from dotenv import load_dotenv
from google import genai
from chatbot.generation_prompt import chatbot_prompt

# Load environment variables from a .env file
load_dotenv()

class ConversationalChatbot:
    """
    A class representing a financial advisory chatbot that uses Google's Gemini API
    to provide insights based on user inputs and transaction history.
    """

    def __init__(self) -> None:
        """
        Initializes the chatbot client using the Gemini API key stored in environment variables.
        """
        self.model = genai.Client(api_key=os.getenv("GEMINI_API"))

    def chat(self, user_input: str, transaction_history: str = "The user has not made any transactions yet.") -> str:
        """
        Generates a response from the chatbot based on the user input and transaction history.

        Args:
            user_input (str): The query or message from the user.
            transaction_history (str): A string containing the user's financial transaction history.

        Returns:
            str: The chatbot's response.
        """
        # Format the full prompt with user input and financial context
        prompt = chatbot_prompt.format(user_input=user_input, context=transaction_history)

        # Send the prompt to the Gemini model and get the generated response
        response = self.model.models.generate_content(
            model="gemini-2.0-flash",
            contents=prompt,
        )

        # Return the response text generated by the model
        return response.text
